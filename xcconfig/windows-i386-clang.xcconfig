
// -ccc-gcc-name requires that the properly named gcc is on PATH, e.g. $PATH://Developer/Cocotron/1.0/Windows/i386/gcc-4.3.1/bin

// Sadly, I have not figured out a way to add to PATH for the compile/link phases in Xcode short of some dumb wrapper or
// putting binaries in system locations.
//
// So, for now, you can do:
// cd /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
// ln -s /Developer/Cocotron/1.0/Windows/i386/gcc-4.3.1/bin/i386-mingw32msvc-gcc .

GCC_VERSION = com.apple.compilers.llvm.clang.1_0

WINDOWS_i386_SYSROOT = /Developer/Cocotron/1.0/Windows/i386/gcc-4.3.1/i386-pc-mingw32msvc
WINDOWS_i386_TARGET_FLAGS = -target i386-pc-mingw32msvc -ccc-gcc-name i386-pc-mingw32msvc-gcc -B$(WINDOWS_i386_SYSROOT)/bin -Xclang -fdata-sections //-no-integrated-as

// -fno-builtin is required to disable internal ObjC runtime prototypes which may not match ours.
// It also has other side effects like not actually using builtins like memset/memcpy for optimization
// So, we really don't want to -fno-builtin eventually.
WINDOWS_i386_COMPILER_CFLAGS = $(WINDOWS_i386_TARGET_FLAGS) -DWINDOWS=1 -D__WIN32__=1 -fno-builtin -fobjc-nonfragile-abi -fobjc-runtime=gnustep-1.8
WINDOWS_i386_COMPILER_LDFLAGS = $(WINDOWS_i386_TARGET_FLAGS) --sysroot $(WINDOWS_i386_SYSROOT)

WINDOWS_i386_COMPILER_ISYSTEM = -isystem $(WINDOWS_i386_SYSROOT)/include/ -isystem $(SRCROOT)/../
WINDOWS_i386_COMPILER_SYSLIB = $(WINDOWS_i386_SYSROOT)/lib
